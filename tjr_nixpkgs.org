This is a copy of the nixpkgs repo, with additional packages defined
for personal use (typically versions of isabelle and HOL).

* 2014-??-?? initial setup

--

Updated/new files:

pkgs/applications/science/logic/myhol   |fails (no hash for fetchgit?)
pkgs/applications/science/logic/hol4k9  |ok                           
pkgs/applications/science/logic/isabelle|ok for isa2013 - needs updating, but probably not worth it, just install from web


--

merge changes from upstream: https://help.github.com/articles/fork-a-repo

https://help.github.com/articles/syncing-a-fork/

git fetch upstream

git merge upstream/master

--

Checkout nixpkgs from github

Add a directory like pkgs/applications/science/logic/myhol/

In this directory, link to e.g. /tmp/l/general/research/code/nix/myhol/default.nix

Change pkgs/top-level/all-packages.nix so that it has an extra clause: myhol = callPackage ../applications/science/logic/myhol { };

put this clause just after the hol clause

Then in the top-level of the github checkout, type:

nix-build -A hol4k9

or 

nix-build -A myhol


finally, ls -al to see where result points, then nix-env -i ./result


TODO: add a polyml 5.5 version to nixpkgs



https://nixos.org/wiki/How_to_add_files_to_the_nix-store


* 2014-08-29 building

Updated/new files:

pkgs/development/compilers/mypolyml     |builds
pkgs/applications/science/logic/myhol   |
pkgs/applications/science/logic/hol4k9  |builds with mypolyml
pkgs/applications/science/logic/isabelle|


nix-build -A hol4k9 gives

Loading system specific functions
Compiling system specific functions (sig sml)
Beginning configuration.
Making tools/mllex/mllex.exe.
Poly/ML 5.5.1 Release
/nix/store/wi8lcasqx0kbabdrdcfymka6r09kp1zh-polyml-5.5.1/lib/libpolyml.a(processes.o): In function `Processes::TestSynchronousRequests(TaskData*)':
(.text+0x1de): undefined reference to `__cxa_allocate_exception'
/nix/store/wi8lcasqx0kbabdrdcfymka6r09kp1zh-polyml-5.5.1/lib/libpolyml.a(processes.o): In function `Processes::TestSynchronousRequests(TaskData*)':
(.text+0x1ed): undefined reference to `__cxa_throw'
...
nix/store/wi8lcasqx0kbabdrdcfymka6r09kp1zh-polyml-5.5.1/lib/libpolyml.a(elfexport.o): In function `ELFExport::exportStore()':
(.text+0x1126): undefined reference to `operator delete[](void*)'
/nix/store/wi8lcasqx0kbabdrdcfymka6r09kp1zh-polyml-5.5.1/lib/libpolyml.a(elfexport.o):(.rodata._ZTI9ELFExport[_ZTI9ELFExport]+0x0): undefined reference to `vtable for __cxxabiv1::__vmi_class_type_info'
/nix/store/wi8lcasqx0kbabdrdcfymka6r09kp1zh-polyml-5.5.1/lib/libpolyml.a(elfexport.o):(.eh_frame+0x113): undefined reference to `__gxx_personality_v0'
collect2: error: ld returned 1 exit status
Failed to build mllex.
builder for `/nix/store/wadmgw4jcqnjqvg1hnhcgxshgw4q18l1-hol4-k.9.drv' failed with exit code 1
error: build of `/nix/store/wadmgw4jcqnjqvg1hnhcgxshgw4q18l1-hol4-k.9.drv' failed

looks like libpoly is built strangely, but it is built normally

so this may be a problem with polyml being too new?

maybe a problem with linking in c++ libraries
--

presumably we can go back to the commit where I added hol49 and build with old poly - no this seems to fail in the same way (because using the new poly)

from hol page: "Note also that Poly/ML 5.5.1 does not work unless installed with the --enable-shared flag. This option must be passed to the invocation of configure that is the first step of building Poly/ML from sources."

so the solution is to fork polyml in nixpkgs, and build with that

--

patched mypolyml and hol4k9; everything now builds fine!


something got screwed up when switching branches

trying again...

poly builds fine

same problem with things apparently screwed up, fixed by cd'ing to nixpkgs dir again - possibly git gets confused somehow?
* 2015-04-29 merge with upstream

  - nix-build -A hol4k9 builds fine

* 2015-04-29 update for hol4k10

  - pkgs/applications/science/logic/hol4k10
  - change src to use fetchgit
    - logic/coq/HEAD.nix has an example
      - where does sha256 come from? why isn't this just the commit rev?
        - http://comments.gmane.org/gmane.linux.distributions.nixos/12143
        - use nix-prefetch-git utility
          - we dont' have this; need to update nix itself
        - nix-env -i nix-prefetch-scripts
        - nix-prefetch-git --url https://github.com/HOL-Theorem-Prover/HOL/ --rev HEAD
          - fatal: unable to access 'https://github.com/HOL-Theorem-Prover/HOL/': SSL certificate problem: unable to get local issuer certificate
          - probably because this is using nix git which can't 
          - https://github.com/NixOS/nixpkgs/issues/3382
          - following first suggestion
          - export GIT_SSL_CAINFO=$HOME/.nix-profile/etc/ca-bundle.crt
          - nix prefetch works!
    - https://github.com/HOL-Theorem-Prover/HOL/
    - k10 commit is 7fcca392d98b86bf480b76844e42d6e1e61d1fd2
    - nix-build -A hol4k10 fails

git revision is 7fcca392d98b86bf480b76844e42d6e1e61d1fd2
git human-readable version is -- none --
Commit date is 2014-11-10 15:37:02 +1100
removing `.git'...
building path(s) ‘/nix/store/2drb28zhq7wfyip905bxmwd0yflhi2f8-hol4-k.10’
tar (child): /nix/store/gaidmy0xwvf0w5lm5qhd94g1b02y0fxc-HOL-7fcca39: Cannot read: Is a directory
tar (child): At beginning of tape, quitting now
tar (child): Error is not recoverable: exiting now

gzip: stdin: unexpected end of file
tar: Child returned status 2
tar: Error is not recoverable: exiting now
builder for ‘/nix/store/1as9lbmcslpih6bi0xqviv31vlqidc81-hol4-k.10.drv’ failed with exit code 2


    - nix-build --keep-failed
    - debugging following https://nixos.org/wiki/Debugging_a_Nix_Package
    - we have a buildCommand which presumably overrides all inbuilt phases
    - after debugging, fail because of an attempt to write to the store:
ls 
Determining configuration parameters: holdir OS poly polymllibdir 
OS:                 linux
poly:               /nix/store/wcfyz07axlqa8lid1xyf9rpygr4kgwgs-mypolyml-5.5.1/bin/poly
polymllibdir:       /nix/store/wcfyz07axlqa8lid1xyf9rpygr4kgwgs-mypolyml-5.5.1/lib
holdir:             /nix/store/0fmhx2ilwdkl0bzn0baysb403crqjl6k-hol4-k.10/src/HOL-7fcca39
DOT_PATH:           /usr/bin/dot

Configuration will begin with above values.  If they are wrong
press Control-C.

Will continue in 1 seconds.

Loading system specific functions
Exception- Io {cause = SysErr ("Permission denied", SOME EACCES), function = "TextIO.openOut", name = "/nix/store/0fmhx2ilwdkl0bzn0baysb403crqjl6k-hol4-k.10/src/HOL-7fcca39/tools-poly/Holmake/Systeml.sml"} raised
Exception- Io {cause = SysErr ("Permission denied", SOME EACCES), function = "TextIO.openOut", name = "/nix/store/0fmhx2ilwdkl0bzn0baysb403crqjl6k-hol4-k.10/src/HOL-7fcca39/tools-poly/Holmake/Systeml.sml"} raised


** You must do
     poly < tools/smart-configure.sml
** from the root HOL directory

val it = (): unit

    - looks like the premissions of the copied srcs should be relaxed
    - this looks like it will build; it does
    - to install: nix-env -i ./result
* 2015-05-10 nixpkgs and ocaml and createFindlibDestdir

  - pkgs/development/tools/ocaml/findlib/default.nix
  - eg ocaml-base64 installed in ~/.nix-profile/lib/ocaml/4.01.0/site-lib/base64/  (since nix presumably on 4.01.0)
  - nix-env -i ocaml gets 4.02.1
  - but ocaml-base64 reinstall doesn't seem to pick up 
  - having upgraded ocaml, how to upgrade findlib packages?
  - why does nix-env -i ocaml install 4.02.1 instead of default 4.01.0?
    - because we are using the system packages, not super/nixpkgs
  - warning: there are multiple derivations named ‘ocaml-findlib-1.5.3’; using the first one
    - probably we need to select by attribute rather than name
    - nix-env man page: To find out the attribute  paths of available packages, use nix-env -qaP ´*´.
    - nix-env -i -A nixpkgs.ocamlPackages.findlib installs a particular version of findlib, but looks like still 4.01.0
    - where is the nixpkgs that are being used by the system?
      - ~/.nix-defexpr/channels/nixpkgs
      - ~/.nix-defexpr/channels/nixpkgs/pkgs/top-level/all-packages.nix
    - when we ask for all attributes, why can't we see variants of ocaml packages for 4.01, 4.02 etc?
      - eg nixpkgs.ocamlPackages_4_02_1.ocaml-base64
      - there is only nixpkgs.ocamlPackages
      - but nix-env -i -A nixpkgs.ocamlPackages_latest.base64 works and installs 4.02.1 libs
      - https://nixos.org/wiki/Howto_find_a_package_in_NixOS suggests using nox to search for packages, but this doesn't seem to show ocamlPackages_latest etc

* 2015-05-11 nix-shell and ocaml for development env in ocamlenv.nix
* 2015-05-12 packaging p3 on nix

  - added to all-packages.nix
  - added p3 dir, with default.nix
  - nix-build -A ocamlPackages.p3
    - works ok
  - add to ocamlenv
    - need to modify NIX_PATH to work with local fork https://nixos.org/wiki/Nix_Modifying_Packages
    - shell shows p3 and base64 both present
  - what about a standalone nix expression in the repo itself (to control build)? default.nix in p3 repo
  - how easy is it to install nix then install p3 starting from a blank ubuntu image?
    - sudo docker run -i -t  ubuntu:14.04 /bin/bash
    - sudo apt-get update
    - sudo apt-get install curl
    - curl https://nixos.org/nix/install | sh
      - need to be non-root; using dockertest repo, editing mini_ubuntu
    - inside docket:
      - curl https://nixos.org/nix/install | sh
      - nix-binary-tarball-unpack/nix-1.8-x86_64-linux/install: $USER is not set
        - export USER=opam fixes this
      - even though I am the opam user
    - . /home/opam/.nix-profile/etc/profile.d/nix.sh
    - cd /tmp/l/github/super/p3
    - nix-build pulls in everything
    - nix-shell in p3, followed by make, make install; install seems
      to work, but ocamlfind list doesn't show; this is because make
      install puts the libs in the nix store, but they are not merged
      into the user environment
    - building from scratch


  - sometimes get the following error when nix-building in p3:
make[2]: Leaving directory '/tmp/nix-build-p3.drv-0/p3/examples/actions'
/tmp/nix-build-p3.drv-0/p3/examples/../build/earley3_main.native -g grammars/E_EEE.g -f inputs/1_0010.txt
Done items: -1
ocamlbuild -I lexer arith.ml
/nix/store/9a0xlgqq1yc67radpkfmavy59lp547rg-ocaml-4.02.1/bin/ocamllex.opt -q lexer/arith.mll
ocamlbuild -I lexer -cflags '-I /tmp/nix-build-p3.drv-0/p3/examples/../build' -lflags '-I /tmp/nix-build-p3.drv-0/p3/examples/../build p3.cma' lexer_main.byte
Exception
  Sys_error("/tmp/nix-build-p3.drv-0/p3/examples/lexer_main.byte: No such file or directory").
Makefile:19: recipe for target 'lexer' failed
make[1]: *** [lexer] Error 100
make[1]: Leaving directory '/tmp/nix-build-p3.drv-0/p3/examples'
Makefile:2: recipe for target 'all' failed
make: *** [all] Error 2
builder for ‘/nix/store/70sz72xcbz26n0lkh1z905snfnxkaxxz-p3.drv’ failed with exit code 2
error: build of ‘/nix/store/70sz72xcbz26n0lkh1z905snfnxkaxxz-p3.drv’ failed
  - in examples/, make lexer fails
  - seems to be some old files handing around
  - in docker, a clean pull from github would be preferable to
    mounting local dirs which may have cruft, but this means we have to give the sha each time

* 2015-05-12 using nix to test multiple software versions

  - eg suppose we want to test the main and dev versions
  - this works fine in p3/default.nix (p3_2014-04-30)
  - we also want to copy all the build and examples into the destination directory

* 2015-06-11 trying to add new scala eclipse version 4.1

  - need to hash file
  - nix-prefetch-url http://downloads.typesafe.com/scalaide-pack/4.1.0-vfinal-luna-211-20150525/scala-SDK-4.1.0-vfinal-2.11-linux.gtk.x86_64.tar.gz
    - curl: (23) Failed writing body (1713 != 5472)
/home/tr61/.nix-profile/bin/nix-prefetch-url: download of ‘http://downloads.typesafe.com/scalaide-pack/4.1.0-vfinal-luna-211-20150525/scala-SDK-4.1.0-vfinal-2.11-linux.gtk.x86_64.tar.gz’ failed
  - nix-prefetch-url file:///home/tr61/Downloads/scala-SDK-4.1.0-vfinal-2.11-linux.gtk.x86_64.tar.gz
    - same error
  - https://github.com/NixOS/nixpkgs/issues/6828
    - use sha256sum


  - added to super/nixpkgs
  - nix-build -A eclipses.eclipse_scala_sdk_41
  - nix-env -i ./result
* 2015-07-06 packaging mycsv

  - want to make a static version of mycsv, including p1 dependencies
    - just copy and paste the p1 default.nix into .nix/2015-07-06.nix
* 2015-07-28 merge with upstream

https://help.github.com/articles/syncing-a-fork/

* 2015-08-25 merge with upstream
* 2015-08-25 upgrade xpra to use lz4

  - looks like we need to try to use pip with nix
  - https://nixos.org/wiki/Development_Environments#Example_3:_A_simple_impure_environment_to_use_virtualenv.2Fpip_with_nix-shell
  - what is a virtualenv? a python isolation environment


  - compiling python-lz4
    - python setup.py build
    - python setup.py install
  - we have python2.7 and python3.4
  - looks like we can use eg pyxml as a basis to work from


---


nix-build -A python_lz4 gives

> Checking .pth file support in /nix/store/wij7slihixnzb0j6hrsbn540qv15gvsk-python-lz4/lib/python2.7/site-packages/
> /nix/store/ss1aq46xwhnqikq5bjs02sb9xrim2bb3-python-2.7.10/bin/python -E -c pass
> TEST FAILED: /nix/store/wij7slihixnzb0j6hrsbn540qv15gvsk-python-lz4/lib/python2.7/site-packages/ does NOT support .pth files
> error: bad install directory or PYTHONPATH
> 
> You are attempting to install a package to a directory that is not
> on PYTHONPATH and which Python does not read ".pth" files from.  The
> installation directory you specified (via --install-dir, --prefix, or
> the distutils default setting) was:
> 
>     /nix/store/wij7slihixnzb0j6hrsbn540qv15gvsk-python-lz4/lib/python2.7/site-packages/
> 
> and your PYTHONPATH environment variable currently contains:
> 
>     '/nix/store/ss1aq46xwhnqikq5bjs02sb9xrim2bb3-python-2.7.10/lib/python2.7/site-packages:/nix/store/5308x1wc8dhsi9vbhxqzpcjcmlprqv6h-python2.7-setuptools-18.0.1/lib/python2.7/site-packages'
> 
> Here are some of your options for correcting the problem:
> 
> * You can choose a different installation directory, i.e., one that is
>   on PYTHONPATH or supports .pth files
> 
> * You can add the installation directory to the PYTHONPATH environment
>   variable.  (It must then also be on PYTHONPATH whenever you run
>   Python and want to use the package(s) you are installing.)
> 
> * You can set up the installation directory to support ".pth" files by
>   using one of the approaches described here:
> 
>   https://pythonhosted.org/setuptools/easy_install.html#custom-installation-locations
> 
> Please make the appropriate changes for your system and try again.
> builder for ‘/nix/store/8vrhakr8ri5avwpl1fj4f4b32i9rzmkn-python-lz4.drv’ failed with exit code 1
> error: build of ‘/nix/store/8vrhakr8ri5avwpl1fj4f4b32i9rzmkn-python-lz4.drv’ failed



---


  - xpra built, but doesn't seem to detect lz4: install and enable lzo or lz4 support for better performance
  - test lz4 in nix-shell -A xpra
    - python -c "import lz4" ; echo $? # OK, installed
  - so we need to somehow enable this when building xpra


  - xpra start :100 --compressors=lz4 seems to work from a nix-shell


  - X server already running on display :100
    - how to kill
    - ps aux |grep X
      - shows Ovfb


  - ok, xpra start/xpra attach works
    - everything seems to work ok, but lz4 is not picked up
    - tests/xpra/net/test_lz4.py works ok, but perhaps picking up local lz4?
    - and in a nix-shell --pure this is picked up

  - code in xpra/net/compression seems to be a bit flaky
    - looking for a file named lz4-0.7.0-py2.7-linux-x86_64.egg/lz4.so
    - but we only have the .egg file - perhaps it needs uncompressing? no
    - not clear why this code is not picking up lz4!
      
      
  - ok, how to find out which compressors xpra knows about?
    - need to remove ~/.xpra!
  - need to run xpra with debugging https://www.xpra.org/trac/wiki/Logging


  - moved to package python_lz4 in python-packages
  - we want to somehow propagate ourself when building python_lz4/



  - these two lines in compression.py are wrong:

    LZ4_uncompress = None
    has_lz4 = False

  - make our own github repo, and fix!


  - turns out the lz4 detection in xpra was buggy; hoping 0.15.4 fixes
    - now it seems to detect! success!


  - xpra start ssh:pc1177:100 --compressors=lz4 --start-child=eclipse
    

